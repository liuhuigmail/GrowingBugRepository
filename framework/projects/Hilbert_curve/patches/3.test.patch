diff --git a/src/test/java/org/davidmoten/hilbert/HilbertCurveTest.java b/src/test/java/org/davidmoten/hilbert/HilbertCurveTest.java
index 8a6e0b7..4629b6a 100644
--- a/src/test/java/org/davidmoten/hilbert/HilbertCurveTest.java
+++ b/src/test/java/org/davidmoten/hilbert/HilbertCurveTest.java
@@ -292,7 +292,7 @@ public class HilbertCurveTest {
         SmallHilbertCurve h = HilbertCurve.small().bits(5).dimensions(2);
         h.query(new long[] { 0, 0 }, new long[] { h.maxOrdinate(), h.maxOrdinate() });
     }
-
+    
     @Test
     public void testTotalRangeExpandingWithIncreasingSplitDepth() {
         // get ranges for Sydney query to measure effectiveness
@@ -312,8 +312,9 @@ public class HilbertCurveTest {
         h.query(point1, point2);
         {
             long t = System.currentTimeMillis();
-            h.query(new long[] { 0, 0, 0 }, new long[] { h.maxOrdinate(), h.maxOrdinate(), h.maxOrdinate() });
-            System.out.println("full domain query took " + (System.currentTimeMillis() - t) + "ms");
+            Ranges ranges = h.query(new long[] { 0, 0, 0 }, new long[] { h.maxOrdinate(), h.maxOrdinate(), h.maxOrdinate() });
+            System.out.println("full domain query took " + (System.currentTimeMillis() - t) + "ms with " + ranges.size() + " ranges");
+            assertTrue(ranges.size() > 10);
         }
         {
             long t = System.currentTimeMillis();
@@ -321,6 +322,7 @@ public class HilbertCurveTest {
                     new long[] { h.maxOrdinate(), h.maxOrdinate(), h.maxOrdinate() / 24 }).size();
             System.out.println("full domain query for first hour took " + (System.currentTimeMillis() - t) + "ms with "
                     + count + " ranges");
+            assertTrue(count > 10);
         }
     }
 
diff --git a/src/test/java/org/davidmoten/hilbert/RangesTest.java b/src/test/java/org/davidmoten/hilbert/RangesTest.java
index a81b607..8f4de46 100644
--- a/src/test/java/org/davidmoten/hilbert/RangesTest.java
+++ b/src/test/java/org/davidmoten/hilbert/RangesTest.java
@@ -16,7 +16,8 @@ public class RangesTest {
         Ranges r = new Ranges(2);
         r.add(Range.create(1));
         r.add(Range.create(10));
-        checkIs(r, 10, 10, 1, 1);
+        checkIs(r, 1, 1, 10, 10);
+        assertEquals(2, r.size());
     }
 
     @Test
@@ -25,7 +26,8 @@ public class RangesTest {
         r.add(Range.create(1));
         r.add(Range.create(10));
         r.add(Range.create(12));
-        checkIs(r, 10, 12, 1, 1);
+        checkIs(r, 1, 1, 10, 12);
+        assertEquals(2, r.size());
     }
 
     @Test
@@ -36,7 +38,7 @@ public class RangesTest {
         r.add(Range.create(12));
         r.add(Range.create(18));
         r.println();
-        checkIs(r, 18, 18, 10, 12, 1, 1);
+        checkIs(r, 1, 1, 10, 12, 18, 18);
     }
 
     @Test(expected = IllegalArgumentException.class)
