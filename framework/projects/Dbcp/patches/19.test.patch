diff --git a/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java b/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
index f905406e..cf7bc4fe 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java
@@ -19,7 +19,6 @@ package org.apache.commons.dbcp2;
 
 import java.sql.Connection;
 import java.sql.Driver;
-import java.sql.PreparedStatement;
 import java.sql.Statement;
 import java.sql.SQLException;
 
@@ -31,7 +30,6 @@ import junit.framework.TestSuite;
 
 import org.apache.commons.pool2.ObjectPool;
 import org.apache.commons.pool2.impl.GenericObjectPool;
-import org.junit.Assert;
 
 /**
  * TestSuite for BasicDataSource with prepared statement pooling enabled
@@ -143,30 +141,4 @@ public class TestPStmtPooling extends TestCase {
             assertTrue(ex.getMessage().endsWith("invalid PoolingConnection."));
         }
     }
-
-    public void testBatchUpdate() throws Exception {
-        @SuppressWarnings("unused") // Ensure TesterDriver is registered
-        Driver d = new TesterDriver();
-        ConnectionFactory connFactory = new DriverManagerConnectionFactory(
-                "jdbc:apache:commons:testdriver","u1","p1");
-
-        PoolableConnectionFactory pcf =
-            new PoolableConnectionFactory(connFactory, null);
-        pcf.setPoolStatements(true);
-        pcf.setDefaultReadOnly(false);
-        pcf.setDefaultAutoCommit(true);
-        ObjectPool<PoolableConnection> connPool = new GenericObjectPool<>(pcf);
-        pcf.setPool(connPool);
-
-        DataSource ds = new PoolingDataSource<>(connPool);
-
-        Connection conn = ds.getConnection();
-        PreparedStatement ps = conn.prepareStatement("select 1 from dual");
-        Statement inner = ((DelegatingPreparedStatement) ps).getInnermostDelegate();
-        // Check DBCP-372
-        ps.addBatch();
-        ps.close();
-        conn.close();
-        Assert.assertFalse(inner.isClosed());
-    }
 }
diff --git a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
index b65448f9..75466b88 100644
--- a/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
+++ b/src/test/java/org/apache/commons/dbcp2/TesterStatement.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- *
+ * 
  *      http://www.apache.org/licenses/LICENSE-2.0
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ import java.sql.Statement;
 
 /**
  * A dummy {@link Statement}, for testing purposes.
- *
+ * 
  * @author Rodney Waldhoff
  * @author Dirk Verbeeck
  * @version $Revision$ $Date$
@@ -40,7 +40,7 @@ public class TesterStatement implements Statement {
         _resultSetType = resultSetType;
         _resultSetConcurrency = resultSetConcurrency;
     }
-
+    
     protected Connection _connection = null;
     protected boolean _open = true;
     protected int _rowsUpdated = 1;
@@ -61,20 +61,20 @@ public class TesterStatement implements Statement {
         checkOpen();
         if("null".equals(sql)) {
             return null;
-        }
+        } 
         if("invalid".equals(sql)) {
             throw new SQLException("invalid query");
         }
         if ("broken".equals(sql)) {
             throw new SQLException("broken connection");
-        }
+        }  
         if("select username".equals(sql)) {
             String username = ((TesterConnection) _connection).getUsername();
             Object[][] data = {{username}};
             return new TesterResultSet(this, data);
         } else {
             // Simulate timeout if queryTimout is set to less than 5 seconds
-            if (_queryTimeout > 0 && _queryTimeout < 5) {
+            if (_queryTimeout > 0 && _queryTimeout < 5) { 
                 throw new SQLException("query timeout");
             }
             return new TesterResultSet(this);
@@ -178,7 +178,7 @@ public class TesterStatement implements Statement {
     public ResultSet getResultSet() throws SQLException {
         checkOpen();
         if (_resultSet == null) {
-            _resultSet = new TesterResultSet(this);
+            _resultSet = new TesterResultSet(this); 
         }
         return _resultSet;
     }
@@ -325,7 +325,7 @@ public class TesterStatement implements Statement {
 
     @Override
     public boolean isClosed() throws SQLException {
-        return !_open;
+        throw new SQLException("Not implemented.");
     }
 
     @Override
