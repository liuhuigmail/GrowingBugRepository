diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
index 588dba2d..36855339 100644
--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java
@@ -20,16 +20,12 @@ package org.apache.commons.dbcp2;
 import static org.junit.Assert.*;
 
 import java.io.IOException;
-import java.lang.management.ManagementFactory;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.Arrays;
 import java.util.Properties;
-import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.management.MBeanServer;
-import javax.management.ObjectName;
 import javax.sql.DataSource;
 
 import org.apache.commons.logging.LogFactory;
@@ -716,26 +712,6 @@ public class TestBasicDataSource extends TestConnectionPool {
         
         ds.close();
     }
-    
-    /**
-     * Make sure setting jmxName to null suppresses JMX registration of connection and statement pools.
-     * JIRA: DBCP-434
-     */
-    @Test
-    public void testJmxDisabled() throws Exception {
-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-        // Unregister leftovers from other tests (TODO: worry about concurrent test execution)
-        ObjectName commons = new ObjectName("org.apache.commons.*:*");
-        Set<ObjectName> results = mbs.queryNames(commons, null);
-        for (ObjectName result : results) {
-            mbs.unregisterMBean(result);
-        }
-        ds.setJmxName(null);  // Should disable JMX for both connection and statement pools
-        ds.setPoolPreparedStatements(true);
-        ds.getConnection();  // Trigger initialization
-        // Nothing should be registered
-        assertEquals(0, mbs.queryNames(commons, null).size());
-    }
 }
 
 /**
