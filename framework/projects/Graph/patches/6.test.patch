diff --git a/src/test/java/org/apache/commons/graph/collections/FibonacciHeapTestCase.java b/src/test/java/org/apache/commons/graph/collections/FibonacciHeapTestCase.java
index 8fca0e7..97f752d 100644
--- a/src/test/java/org/apache/commons/graph/collections/FibonacciHeapTestCase.java
+++ b/src/test/java/org/apache/commons/graph/collections/FibonacciHeapTestCase.java
@@ -22,11 +22,7 @@ package org.apache.commons.graph.collections;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import java.util.Queue;
-import java.util.Random;
 
 import org.junit.After;
 import org.junit.Before;
@@ -94,49 +90,5 @@ public final class FibonacciHeapTestCase
         assertThat( queue.poll(), is( 100 ) );
         assertThat( queue.isEmpty(), is( true ) );
     }
-    
-    @Test
-    public void insertSingleItem()
-    {
-        queue.add( 50 );
-
-        assertThat( queue.poll(), is( 50 ) );
-        assertThat( queue.isEmpty(), is( true ) );
-    }
-    
-    @Test
-    public void insertSameValuesAndReturnsOrderedItems()
-    {
-        queue.add( 50 );
-        queue.add( 100 );
-        queue.add( 50 );
-
 
-        assertThat( queue.poll(), is( 50 ) );
-        assertThat( queue.poll(), is( 50 ) );
-        assertThat( queue.poll(), is( 100 ) );
-        assertThat( queue.isEmpty(), is( true ) );
-    }
-
-    @Test
-    public void returnsOrderedItemsFromRandomInsert()
-    {
-        final Random r = new Random( System.currentTimeMillis() );
-        final List<Integer> expected = new ArrayList<Integer>();
-        
-        for ( int i = 0; i < 1000; i++ )
-        {
-            Integer number = new Integer( r.nextInt(10000) );
-            expected.add( number );
-            
-            queue.add( number );
-        }
-        Collections.sort( expected );
-        
-        for ( Integer integer : expected )
-        {
-            Integer i = queue.poll();
-            assertThat( i, is( integer ) );
-        }
-    }
 }
diff --git a/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java b/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java
index 1cdb53f..ce499e6 100644
--- a/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java
+++ b/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java
@@ -220,7 +220,7 @@ public final class PrimTestCase
 
         expected.addEdge( a, new BaseLabeledWeightedEdge<Double>( "a <-> b", 7D ), b );
         expected.addEdge( a, new BaseLabeledWeightedEdge<Double>( "a <-> d", 5D ), d );
-        expected.addEdge( b, new BaseLabeledWeightedEdge<Double>( "b <-> e", 7D ), e );
+        expected.addEdge( b, new BaseLabeledWeightedEdge<Double>( "b <-> e", 9D ), e );
         expected.addEdge( c, new BaseLabeledWeightedEdge<Double>( "c <-> e", 5D ), e );
         expected.addEdge( d, new BaseLabeledWeightedEdge<Double>( "d <-> f", 6D ), f );
         expected.addEdge( e, new BaseLabeledWeightedEdge<Double>( "e <-> g", 9D ), g );
