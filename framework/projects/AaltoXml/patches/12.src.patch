diff --git a/src/main/java/com/fasterxml/aalto/out/ByteXmlWriter.java b/src/main/java/com/fasterxml/aalto/out/ByteXmlWriter.java
index 5334e28..64517a4 100644
--- a/src/main/java/com/fasterxml/aalto/out/ByteXmlWriter.java
+++ b/src/main/java/com/fasterxml/aalto/out/ByteXmlWriter.java
@@ -799,7 +799,6 @@ public abstract class ByteXmlWriter
             ++offset;
             --len;
         }
-
         // Unlike with writeCharacters() and fastWriteName(), let's not
         // worry about split buffers here: this is unlikely to become
         // performance bottleneck. This allows keeping it simple; and
@@ -1198,18 +1197,12 @@ public abstract class ByteXmlWriter
     protected int writeCommentContents(char[] cbuf, int offset, int len)
         throws IOException, XMLStreamException
     {
-        if (_surrogate != 0) {
-            outputSurrogates(_surrogate, cbuf[offset]);
-            // reset the temporary surrogate storage
-            _surrogate = 0;
-            ++offset;
-            --len;
-        }
-
-        // Unlike with writeCharacters() and fastWriteName(), let's not
-        // worry about split buffers here: this is unlikely to become
-        // performance bottleneck. This allows keeping it simple; and
-        // should it matter, we could start doing fast version here as well.
+        /* Unlike with writeCharacters() and fastWriteName(), let's not
+         * worry about split buffers here: this is unlikely to become
+         * performance bottleneck. This allows keeping it simple; and
+         * should it matter, we could start doing fast version here
+         * as well.
+         */
         len += offset; // now marks the end
 
         main_loop:
@@ -1293,10 +1286,12 @@ public abstract class ByteXmlWriter
     protected int writePIData(char[] cbuf, int offset, int len)
         throws IOException, XMLStreamException
     {
-        // Unlike with writeCharacters() and fastWriteName(), let's not
-        // worry about split buffers here: this is unlikely to become
-        // performance bottleneck. This allows keeping it simple; and
-        // should it matter, we could start doing fast version here as well.
+        /* Unlike with writeCharacters() and fastWriteName(), let's not
+         * worry about split buffers here: this is unlikely to become
+         * performance bottleneck. This allows keeping it simple; and
+         * should it matter, we could start doing fast version here
+         * as well.
+         */
         len += offset; // now marks the end
 
         main_loop:
