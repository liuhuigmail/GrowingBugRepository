diff --git a/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java b/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
index 43ae9817..9a8336fa 100644
--- a/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
+++ b/src/test/org/apache/commons/beanutils/PropertyUtilsTestCase.java
@@ -208,15 +208,6 @@ public class PropertyUtilsTestCase extends TestCase {
         beanPrivateSubclass = PrivateBeanFactory.createSubclass();
         beanPublicSubclass = new TestBeanPublicSubclass();
 
-        DynaProperty[] properties = new DynaProperty[] {
-                new DynaProperty("stringProperty", String.class),
-                new DynaProperty("nestedBean", TestBean.class),
-                new DynaProperty("nullDynaBean", DynaBean.class)
-                };
-        BasicDynaClass dynaClass = new BasicDynaClass("nestedDynaBean", BasicDynaBean.class, properties);
-        BasicDynaBean nestedDynaBean = new BasicDynaBean(dynaClass);
-        nestedDynaBean.set("nestedBean", bean);
-        bean.setNestedDynaBean(nestedDynaBean);
     }
 
 
@@ -1786,28 +1777,6 @@ public class PropertyUtilsTestCase extends TestCase {
             clazz = PropertyUtils.getPropertyType(bean, "nested.writeOnlyProperty");
             assertEquals("writeOnlyProperty type", String.class, clazz);
 
-            // Nested DynaBean
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean");
-            assertEquals("nestedDynaBean type", DynaBean.class, clazz);
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.stringProperty");
-            assertEquals("nestedDynaBean.stringProperty type", String.class, clazz);
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.nestedBean");
-            assertEquals("nestedDynaBean.nestedBean type", TestBean.class, clazz);
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.nestedBean.nestedDynaBean");
-            assertEquals("nestedDynaBean.nestedBean.nestedDynaBean type", DynaBean.class, clazz);
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.nestedBean.nestedDynaBean.stringProperty");
-            assertEquals("nestedDynaBean.nestedBean.nestedDynaBean.stringPropert type", String.class, clazz);
-
-            // test Null
-            clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.nullDynaBean");
-            assertEquals("nestedDynaBean.nullDynaBean type", DynaBean.class, clazz);
-            try {
-                clazz = PropertyUtils.getPropertyType(bean, "nestedDynaBean.nullDynaBean.foo");
-                fail("Expected NestedNullException for nestedDynaBean.nullDynaBean.foo");
-            } catch (NestedNullException e) {
-                // expected
-            }
-
         } catch (Exception e) {
             fail("Exception: " + e.getMessage());
         }
@@ -2274,6 +2243,7 @@ public class PropertyUtilsTestCase extends TestCase {
      * Test isReadable() method.
      */
     public void testIsReadable() {
+        TestBean bean = new TestBean();
         String property = null;
         try {
             property = "stringProperty";
@@ -2294,63 +2264,13 @@ public class PropertyUtilsTestCase extends TestCase {
             fail("Property " + property +" isReadable Threw exception: " + t);
         }
         
-        try {
-            property = "nestedDynaBean";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.stringProperty";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean.nestedDynaBean";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean.nestedDynaBean.stringProperty";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nullDynaBean";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nullDynaBean.foo";
-            assertTrue("Property " + property +" isReadable expeced TRUE", PropertyUtils.isReadable(bean, property));
-            fail("Property " + property +" isReadable expected NestedNullException");
-        } catch (NestedNullException e) {
-            // expected result
-        } catch (Throwable t) {
-            fail("Property " + property +" isReadable Threw exception: " + t);
-        }
     }
 
     /**
      * Test isWriteable() method.
      */
     public void testIsWriteable() {
+        TestBean bean = new TestBean();
         String property = null;
         try {
             property = "stringProperty";
@@ -2371,58 +2291,6 @@ public class PropertyUtilsTestCase extends TestCase {
             fail("Property " + property +" isWriteable Threw exception: " + t);
         }
         
-        try {
-            property = "nestedDynaBean";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.stringProperty";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            t.printStackTrace();
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean.nestedDynaBean";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nestedBean.nestedDynaBean.stringProperty";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nullDynaBean";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
-
-        try {
-            property = "nestedDynaBean.nullDynaBean.foo";
-            assertTrue("Property " + property +" isWriteable expeced TRUE", PropertyUtils.isWriteable(bean, property));
-            fail("Property " + property +" isWriteable expected NestedNullException");
-        } catch (NestedNullException e) {
-            // expected result
-        } catch (Throwable t) {
-            fail("Property " + property +" isWriteable Threw exception: " + t);
-        }
     }
 
 
diff --git a/src/test/org/apache/commons/beanutils/TestBean.java b/src/test/org/apache/commons/beanutils/TestBean.java
index 028f9124..55937bd6 100644
--- a/src/test/org/apache/commons/beanutils/TestBean.java
+++ b/src/test/org/apache/commons/beanutils/TestBean.java
@@ -414,19 +414,6 @@ public class TestBean implements Serializable {
    public void setAnotherNested( TestBean anotherNested ) {
       this.anotherNested = anotherNested;
    }
-
-   /**
-    * Another nested reference to another test bean,
-    */
-   private DynaBean nestedDynaBean = null;
-    
-   public DynaBean getNestedDynaBean() {
-      return nestedDynaBean;
-   }
-    
-   public void setNestedDynaBean(DynaBean nestedDynaBean) {
-      this.nestedDynaBean = nestedDynaBean;
-   }
    
     /*
      * Another nested reference to a bean containing mapp properties
