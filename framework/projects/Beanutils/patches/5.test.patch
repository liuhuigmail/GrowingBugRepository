diff --git a/src/test/org/apache/commons/beanutils/TestBean.java b/src/test/org/apache/commons/beanutils/TestBean.java
index ee929ef9..88861053 100755
--- a/src/test/org/apache/commons/beanutils/TestBean.java
+++ b/src/test/org/apache/commons/beanutils/TestBean.java
@@ -418,7 +418,7 @@ public class TestBean implements Serializable {
     /*
      * Another nested reference to a bean containing mapp properties
      */
-    public class MappedTestBean {
+    class MappedTestBean {
         public void setValue(String key,String val) { }
         public String getValue(String key) { return "Mapped Value"; }
     }
diff --git a/src/test/org/apache/commons/beanutils/bugs/Jira18TestCase.java b/src/test/org/apache/commons/beanutils/bugs/Jira18TestCase.java
deleted file mode 100644
index a98e8491..00000000
--- a/src/test/org/apache/commons/beanutils/bugs/Jira18TestCase.java
+++ /dev/null
@@ -1,285 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.beanutils.bugs;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.apache.commons.beanutils.PropertyUtils;
-import org.apache.commons.beanutils.bugs.other.Jira18BeanFactory;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-/**
- * Test case for Jira issue# BEANUTILS-18.
- * <p />
- * See https://issues.apache.org/jira/browse/BEANUTILS-18
- * <p />
- * 
- * 
- * <p />
- * This test case demonstrates the issue.
- *
- * @version $Revision$ $Date$
- */
-public class Jira18TestCase extends TestCase {
-
-    private Log log = LogFactory.getLog(Jira18TestCase.class);
-    private Object bean;
-
-    /**
-     * Create a test case with the specified name.
-     *
-     * @param name The name of the test
-     */
-    public Jira18TestCase(String name) {
-        super(name);
-    }
-
-    /**
-     * Run the Test.
-     *
-     * @param args Arguments
-     */
-    public static void main(String[] args) {
-        junit.textui.TestRunner.run(suite());
-    }
-
-    /**
-     * Create a test suite for this test.
-     *
-     * @return a test suite
-     */
-    public static Test suite() {
-        return (new TestSuite(Jira18TestCase.class));
-    }
-
-    /**
-     * Set up.
-     *
-     * @throws java.lang.Exception
-     */
-    protected void setUp() throws Exception {
-        super.setUp();
-        bean = Jira18BeanFactory.createBean();
-    }
-
-    /**
-     * Tear Down.
-     *
-     * @throws java.lang.Exception
-     */
-    protected void tearDown() throws Exception {
-        super.tearDown();
-    }
-
-    /**
-     * Test {@link PropertyUtils#isReadable(Object, String)}
-     * for simple properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isReadable() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isReadable(bean, "simple");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isReadable(bean, \"simple\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#isWriteable(Object, String)}
-     * for simple properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isWriteable() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isWriteable(bean, "simple");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isWriteable(bean, \"simple\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#isReadable(Object, String)}
-     * for indexed properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isReadable_Indexed() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isReadable(bean, "indexed");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isReadable(bean, \"indexed\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#isWriteable(Object, String)}
-     * for indexed properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Indexed() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isWriteable(bean, "indexed");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isWriteable(bean, \"indexed\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#isReadable(Object, String)}
-     * for Mapped properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isReadable_Mapped() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isReadable(bean, "mapped");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isReadable(bean, \"mapped\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#isWriteable(Object, String)}
-     * for Mapped properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Mapped() {
-        boolean result = false;
-        try {
-            result = PropertyUtils.isWriteable(bean, "mapped");
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertFalse("PropertyUtils.isWriteable(bean, \"mapped\") returned true", result);
-    }
-
-    /**
-     * Test {@link PropertyUtils#getProperty(Object, String)}
-     * for simple properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_getProperty() {
-        boolean threwNoSuchMethodException = false;
-        Object result = null;
-        try {
-            result = PropertyUtils.getProperty(bean, "simple");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException but returned '" + result + "'", threwNoSuchMethodException);
-    }
-
-    /**
-     * Test {@link PropertyUtils#setProperty(Object, String, Object)}
-     * for simple properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_setProperty() {
-        boolean threwNoSuchMethodException = false;
-        try {
-            PropertyUtils.setProperty(bean, "simple", "BAR");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException", threwNoSuchMethodException);
-    }
-
-    /**
-     * Test {@link PropertyUtils#getProperty(Object, String)}
-     * for indexed properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_getProperty_Indexed() {
-        boolean threwNoSuchMethodException = false;
-        Object result = null;
-        try {
-            result = PropertyUtils.getProperty(bean, "indexed[0]");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException but returned '" + result + "'", threwNoSuchMethodException);
-    }
-
-    /**
-     * Test {@link PropertyUtils#setProperty(Object, String, Object)}
-     * for indexed properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_setProperty_Indexed() {
-        boolean threwNoSuchMethodException = false;
-        try {
-            PropertyUtils.setProperty(bean, "indexed[0]", "BAR");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException", threwNoSuchMethodException);
-    }
-
-    /**
-     * Test {@link PropertyUtils#getProperty(Object, String)}
-     * for mapped properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_getProperty_Mapped() {
-        boolean threwNoSuchMethodException = false;
-        Object result = null;
-        try {
-            result = PropertyUtils.getProperty(bean, "mapped(foo-key)");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException but returned '" + result + "'", threwNoSuchMethodException);
-    }
-
-    /**
-     * Test {@link PropertyUtils#setProperty(Object, String, Object)}
-     * for mapped properties.
-     */
-    public void testIssue_BEANUTILS_18_PropertyUtils_setProperty_Mapped() {
-        boolean threwNoSuchMethodException = false;
-        try {
-            PropertyUtils.setProperty(bean, "mapped(foo-key)", "BAR");
-        } catch (NoSuchMethodException ex) {
-            threwNoSuchMethodException = true; // expected result
-        } catch (Throwable t) {
-            log.error("ERROR " + t, t);
-            fail("Threw exception: " + t);
-        }
-        assertTrue("Expected NoSuchMethodException", threwNoSuchMethodException);
-    }
-}
diff --git a/src/test/org/apache/commons/beanutils/bugs/other/Jira18BeanFactory.java b/src/test/org/apache/commons/beanutils/bugs/other/Jira18BeanFactory.java
deleted file mode 100644
index f1102500..00000000
--- a/src/test/org/apache/commons/beanutils/bugs/other/Jira18BeanFactory.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.beanutils.bugs.other;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.commons.beanutils.bugs.Jira18TestCase;
-
-/**
- * Factory whcih creates <i>package</i> scope beans with
- * public methods for {@link Jira18TestCase}.
- * 
- * @version $Revision$ $Date$
- */
-public class Jira18BeanFactory {
-
-    /**
-     * Factory method which creates package friendly beans.
-     *
-     * @return The a package friendly bean with public methods
-     */
-    public static Object createBean() {
-        return new PackageFriendlyBean();
-    }
-
-    /* =============== Package Friendly Bean =============== */
-    static class PackageFriendlyBean {
-
-        private String[] indexed = new String[] {"one", "two", "three"};
-        private String simple = "FOO";
-        private Map mapped = new HashMap();
-
-        /** Default Constructor */
-        public PackageFriendlyBean() {
-            mapped.put("foo-key", "foo-value");
-            mapped.put("bar-key", "bar-value");
-        }
-        /**
-         * Return simple property.
-         * 
-         * @return The simple value
-         */
-        public String getSimple() {
-            return simple;
-        }
-
-        /**
-         * Set simple property.
-         * 
-         * @param simple The simple value
-         */
-        public void setSimple(String simple) {
-            this.simple = simple;
-        }
-
-        /**
-         * Return indexed property.
-         * 
-         * @param index The index
-         * @return The indexed value
-         */
-        public String getIndexed(int index) {
-            return indexed[index];
-        }
-
-        /**
-         * Set indexed property.
-         * 
-         * @param index The index
-         * @param value The indexed value
-         */
-        public void setIndexed(int index, String value) {
-            this.indexed[index] = value;
-        }
-
-        /**
-         * Return mapped property.
-         * 
-         * @param key The mapped key
-         * @return The mapped value
-         */
-        public String getMapped(String key) {
-            return (String)mapped.get(key);
-        }
-
-        /**
-         * Set mapped property.
-         * 
-         * @param key The mapped key
-         * @param value The mapped value
-         */
-        public void setMapped(String key, String value) {
-            mapped.put(key, value);
-        }
-
-    }
-
-}
