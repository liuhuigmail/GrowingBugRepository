diff --git a/src/main/java/org/apache/commons/beanutils/LazyDynaList.java b/src/main/java/org/apache/commons/beanutils/LazyDynaList.java
index 0c595d4e..32d69537 100644
--- a/src/main/java/org/apache/commons/beanutils/LazyDynaList.java
+++ b/src/main/java/org/apache/commons/beanutils/LazyDynaList.java
@@ -16,10 +16,11 @@
  */
 package org.apache.commons.beanutils;
 
-import java.lang.reflect.Array;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Map;
+import java.util.Collection;
+import java.util.Iterator;
+import java.lang.reflect.Array;
 
 /**
  * <h2><i>Lazy</i> DynaBean List.</h2>
@@ -158,7 +159,7 @@ import java.util.Map;
  * @version $Id$
  * @since 1.8.0
  */
-public class LazyDynaList extends ArrayList<Object> {
+public class LazyDynaList extends ArrayList {
 
     /**
      * The DynaClass of the List's elements.
@@ -178,12 +179,12 @@ public class LazyDynaList extends ArrayList<Object> {
     /**
      * The type of the List's elements.
      */
-    private Class<?> elementType;
+    private Class elementType;
 
     /**
      * The DynaBean type of the List's elements.
      */
-    private Class<?> elementDynaBeanType;
+    private Class elementDynaBeanType;
 
 
     // ------------------- Constructors ------------------------------
@@ -223,7 +224,7 @@ public class LazyDynaList extends ArrayList<Object> {
      *
      * @param elementType The Type of the List's elements.
      */
-    public LazyDynaList(Class<?> elementType) {
+    public LazyDynaList(Class elementType) {
         super();
         setElementType(elementType);
     }
@@ -232,9 +233,9 @@ public class LazyDynaList extends ArrayList<Object> {
      * Construct a  LazyDynaList populated with the
      * elements of a Collection.
      *
-     * @param collection The Collection to populate the List from.
+     * @param collection The Collection to poulate the List from.
      */
-    public LazyDynaList(Collection<?> collection) {
+    public LazyDynaList(Collection collection) {
         super(collection.size());
         addAll(collection);
     }
@@ -243,7 +244,7 @@ public class LazyDynaList extends ArrayList<Object> {
      * Construct a  LazyDynaList populated with the
      * elements of an Array.
      *
-     * @param array The Array to populate the List from.
+     * @param array The Array to poulate the List from.
      */
     public LazyDynaList(Object[] array) {
         super(array.length);
@@ -298,7 +299,7 @@ public class LazyDynaList extends ArrayList<Object> {
      * @return true if elements were added.
      */
     @Override
-    public boolean addAll(Collection<?> collection) {
+    public boolean addAll(Collection collection) {
 
         if (collection == null || collection.size() == 0) {
             return false;
@@ -306,8 +307,9 @@ public class LazyDynaList extends ArrayList<Object> {
 
         ensureCapacity(size() + collection.size());
 
-        for (Object e : collection) {
-            add(e);
+        Iterator iterator = collection.iterator();
+        while (iterator.hasNext()) {
+            add(iterator.next());
         }
 
         return true;
@@ -327,7 +329,7 @@ public class LazyDynaList extends ArrayList<Object> {
      * @return true if elements were added.
      */
     @Override
-    public boolean addAll(int index, Collection<?> collection) {
+    public boolean addAll(int index, Collection collection) {
 
         if (collection == null || collection.size() == 0) {
             return false;
@@ -335,7 +337,7 @@ public class LazyDynaList extends ArrayList<Object> {
 
         ensureCapacity((index > size() ? index : size()) + collection.size());
 
-        // Call "transform" with first element, before
+        // Call "tranform" with first element, before
         // List is "grown" to ensure the correct DynaClass
         // is set.
         if (size() == 0) {
@@ -344,9 +346,9 @@ public class LazyDynaList extends ArrayList<Object> {
 
         growList(index);
 
-        int currentIndex = index;
-        for (Object e : collection) {
-            add(currentIndex++, e);
+        Iterator iterator = collection.iterator();
+        while (iterator.hasNext()) {
+            add(index++, iterator.next());
         }
 
         return true;
@@ -433,40 +435,36 @@ public class LazyDynaList extends ArrayList<Object> {
     /**
      * <p>Converts the List to an Array of the specified type.</p>
      *
-     * @param <T> The type of the array elements
      * @param model The model for the type of array to return
      * @return An Array of the elements in this List.
      */
     @Override
-    public <T> T[] toArray(T[] model) {
+    public Object[] toArray(Object[] model) {
 
-        Class<?> arrayType = model.getClass().getComponentType();
-        if ((DynaBean.class.isAssignableFrom(arrayType))
-                || (size() == 0 && elementType == null)) {
-            return super.toArray(model);
+        // Allocate the Array
+        Class arrayType = model.getClass().getComponentType();
+        Object[] array = (Object[])Array.newInstance(arrayType, size());
+
+        if (size() == 0 && elementType == null) {
+            return new LazyDynaBean[0];
         }
 
-        if ((arrayType.isAssignableFrom(elementType))) {
-            T[] array;
-            if (model.length >= size()) {
-                array = model;
-            } else {
-                @SuppressWarnings("unchecked")
-                // This is safe because we know the element type
-                T[] tempArray = (T[]) Array.newInstance(arrayType, size());
-                array = tempArray;
+        if ((DynaBean.class.isAssignableFrom(arrayType))) {
+            for (int i = 0; i < size(); i++) {
+                array[i] = get(i);
             }
+            return array;
+        }
 
+        if ((arrayType.isAssignableFrom(elementType))) {
             for (int i = 0; i < size(); i++) {
-                Object elem;
                 if (Map.class.isAssignableFrom(elementType)) {
-                    elem = ((LazyDynaMap) get(i)).getMap();
+                    array[i] = ((LazyDynaMap)get(i)).getMap();
                 } else if (DynaBean.class.isAssignableFrom(elementType)) {
-                    elem = get(i);
+                    array[i] = get(i);
                 } else {
-                    elem = ((WrapDynaBean) get(i)).getInstance();
+                    array[i] = ((WrapDynaBean)get(i)).getInstance();
                 }
-                Array.set(array, i, elem);
             }
             return array;
         }
@@ -506,7 +504,7 @@ public class LazyDynaList extends ArrayList<Object> {
      * @exception IllegalArgumentException if the List already
      *            contains elements or the DynaClass is null.
      */
-    public void setElementType(Class<?> elementType) {
+    public void setElementType(Class elementType) {
 
         if (elementType == null) {
             throw new IllegalArgumentException("Element Type is missing");
@@ -531,7 +529,7 @@ public class LazyDynaList extends ArrayList<Object> {
         // Create a DynaBean
         DynaBean dynaBean = null;
         if (Map.class.isAssignableFrom(elementType)) {
-            dynaBean = new LazyDynaMap((Map<?, ?>)object);
+            dynaBean = new LazyDynaMap((Map)object);
             this.elementDynaClass = dynaBean.getDynaClass();
         } else if (DynaBean.class.isAssignableFrom(elementType)) {
             dynaBean = (DynaBean)object;
@@ -625,14 +623,14 @@ public class LazyDynaList extends ArrayList<Object> {
      *    <li>DynaBeans are unchanged.</li>
      * </li>
      *
-     * @param element The element to transformed.
+     * @param element The element to transformt.
      * @param The DynaBean to store in the List.
      */
     private DynaBean transform(Object element) {
 
         DynaBean dynaBean     = null;
-        Class<?> newDynaBeanType = null;
-        Class<?> newElementType  = null;
+        Class newDynaBeanType = null;
+        Class newElementType  = null;
 
         // Create a new element
         if (element == null) {
@@ -663,7 +661,7 @@ public class LazyDynaList extends ArrayList<Object> {
             // Transform Object to a DynaBean
             newElementType = element.getClass();
             if (Map.class.isAssignableFrom(element.getClass())) {
-                dynaBean = new LazyDynaMap((Map<?, ?>)element);
+                dynaBean = new LazyDynaMap((Map)element);
             } else if (DynaBean.class.isAssignableFrom(element.getClass())) {
                 dynaBean = (DynaBean)element;
             } else {
