diff --git a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
index 5d535196..de2fbaae 100644
--- a/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
+++ b/src/main/java/org/apache/commons/scxml2/SCXMLExecutor.java
@@ -34,7 +34,6 @@ import org.apache.commons.scxml2.model.SCXML;
 import org.apache.commons.scxml2.model.State;
 import org.apache.commons.scxml2.model.TransitionTarget;
 import org.apache.commons.scxml2.semantics.SCXMLSemanticsImpl;
-import org.apache.commons.scxml2.system.EventVariable;
 
 /**
  * <p>The SCXML &quot;engine&quot; that executes SCXML documents. The
@@ -497,11 +496,11 @@ public class SCXMLExecutor implements Serializable {
      */
     private Object[] setEventData(final TriggerEvent[] evts) {
         Context rootCtx = scInstance.getRootContext();
-        Object[] oldData = { rootCtx.get(EVENT_DATA), rootCtx.get(EVENT_DATA_MAP), rootCtx.get(EVENT_VARIABLE) };
+        Object[] oldData = {rootCtx.get(EVENT_DATA),
+            rootCtx.get(EVENT_DATA_MAP)};
         int len = evts.length;
         if (len > 0) { // 0 has retry semantics (eg: see usage in reset())
             Object eventData = null;
-            EventVariable eventVar = null;
             Map<String, Object> payloadMap = new HashMap<String, Object>();
             for (TriggerEvent te : evts) {
                 payloadMap.put(te.getName(), te.getPayload());
@@ -510,11 +509,9 @@ public class SCXMLExecutor implements Serializable {
                 // we have only one event
                 eventData = evts[0].getPayload();
                 // TODO: determine type, sendid, origin, originType and invokeid based on context.
-                eventVar = new EventVariable(evts[0].getName(), EventVariable.TYPE_INTERNAL, null, null, null, null, eventData);
             }
             rootCtx.setLocal(EVENT_DATA, eventData);
             rootCtx.setLocal(EVENT_DATA_MAP, payloadMap);
-            rootCtx.setLocal(EVENT_VARIABLE, eventVar);
         }
         return oldData;
     }
@@ -525,7 +522,6 @@ public class SCXMLExecutor implements Serializable {
     private void restoreEventData(final Object[] oldData) {
         scInstance.getRootContext().setLocal(EVENT_DATA, oldData[0]);
         scInstance.getRootContext().setLocal(EVENT_DATA_MAP, oldData[1]);
-        scInstance.getRootContext().setLocal(EVENT_VARIABLE, oldData[2]);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/scxml2/system/EventVariable.java b/src/main/java/org/apache/commons/scxml2/system/EventVariable.java
deleted file mode 100644
index bb181e35..00000000
--- a/src/main/java/org/apache/commons/scxml2/system/EventVariable.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.scxml2.system;
-
-import java.io.Serializable;
-
-/**
- * Event system variable holding a structure containing the current event's name and any data contained in the event
- */
-public class EventVariable implements Serializable {
-
-    /**
-     * Serial version UID.
-     */
-    private static final long serialVersionUID = 1L;
-
-    public static final String TYPE_PLATFORM = "platform";
-    public static final String TYPE_INTERNAL = "internal";
-    public static final String TYPE_EXTERNAL = "external";
-
-    /**
-     * The name of the event.
-     */
-    private final String name;
-
-    /**
-     * The event type
-     */
-    private final String type;
-
-    /**
-     * The sendid in case the sending entity has specified a value for this.
-     */
-    private final String sendid;
-
-    /**
-     * The URI string of the originating entity in an external event.
-     */
-    private final String origin;
-
-    /**
-     * The type in an external event.
-     */
-    private final String originType;
-
-    /**
-     * The invoke id of the invocation that triggered the child process.
-     */
-    private final String invokeId;
-
-    /**
-     * Whatever data the sending entity chose to include in the event
-     */
-    private final Object data;
-
-    public EventVariable(final String name, final String type, final String sendid, final String origin, final String originType, final String invokeId, final Object data) {
-        this.name = name;
-        this.type = type;
-        this.sendid = sendid;
-        this.origin = origin;
-        this.originType = originType;
-        this.invokeId = invokeId;
-        this.data = data;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public String getType() {
-        return type;
-    }
-
-    public String getSendid() {
-        return sendid;
-    }
-
-    public String getOrigin() {
-        return origin;
-    }
-
-    public String getOriginType() {
-        return originType;
-    }
-
-    public String getInvokeId() {
-        return invokeId;
-    }
-
-    public Object getData() {
-        return data;
-    }
-}
-
