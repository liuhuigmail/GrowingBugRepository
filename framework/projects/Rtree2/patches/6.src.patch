diff --git a/src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java b/src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java
index 425ee17..227254e 100644
--- a/src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java
+++ b/src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java
@@ -155,4 +155,4 @@ final class FlatBuffersHelper {
         return Geometries.line(b.minX(), b.minY(), b.maxX(), b.maxY());
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/github/davidmoten/rtree/geometry/Point.java b/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
index bf16bf1..742b335 100644
--- a/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
+++ b/src/main/java/com/github/davidmoten/rtree/geometry/Point.java
@@ -1,13 +1,14 @@
 package com.github.davidmoten.rtree.geometry;
 
-public final class Point implements Rectangle {
+import com.github.davidmoten.guavamini.Objects;
+import com.github.davidmoten.guavamini.Optional;
+import com.github.davidmoten.rtree.internal.util.ObjectsHelper;
 
-    private final float x;
-    private final float y;
+public final class Point implements Geometry {
+    private final Rectangle mbr;
 
     private Point(float x, float y) {
-        this.x = x;
-        this.y = y;
+        this.mbr = RectangleImpl.create(x, y, x, y);
     }
 
     static Point create(double x, double y) {
@@ -20,12 +21,12 @@ public final class Point implements Rectangle {
 
     @Override
     public Rectangle mbr() {
-        return this;
+        return mbr;
     }
 
     @Override
     public double distance(Rectangle r) {
-        return RectangleImpl.distance(x, y, x, y, r.x1(), r.y1(), r.x2(), r.y2());
+        return mbr.distance(r);
     }
 
     public double distance(Point p) {
@@ -33,47 +34,36 @@ public final class Point implements Rectangle {
     }
 
     public double distanceSquared(Point p) {
-        float dx = x - p.x;
-        float dy = y - p.y;
+        float dx = mbr().x1() - p.mbr().x1();
+        float dy = mbr().y1() - p.mbr().y1();
         return dx * dx + dy * dy;
     }
 
     @Override
     public boolean intersects(Rectangle r) {
-        return r.x1() <= x && x <= r.x2() && r.y1() <= y && y <= r.y2();
+        return mbr.intersects(r);
     }
 
     public float x() {
-        return x;
+        return mbr.x1();
     }
 
     public float y() {
-        return y;
+        return mbr.y1();
     }
 
     @Override
     public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + Float.floatToIntBits(x);
-        result = prime * result + Float.floatToIntBits(y);
-        return result;
+        return Objects.hashCode(mbr);
     }
 
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
+        Optional<Point> other = ObjectsHelper.asClass(obj, Point.class);
+        if (other.isPresent()) {
+            return Objects.equal(mbr, other.get().mbr());
+        } else
             return false;
-        if (getClass() != obj.getClass())
-            return false;
-        Point other = (Point) obj;
-        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
-            return false;
-        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
-            return false;
-        return true;
     }
 
     @Override
@@ -81,55 +71,14 @@ public final class Point implements Rectangle {
         return "Point [x=" + x() + ", y=" + y() + "]";
     }
 
-    @Override
-    public Geometry geometry() {
-        return this;
-    }
 
-    @Override
-    public float x1() {
-        return x;
-    }
 
-    @Override
-    public float y1() {
-        return y;
-    }
 
-    @Override
-    public float x2() {
-        return x;
-    }
 
-    @Override
-    public float y2() {
-        return y;
-    }
 
-    @Override
-    public float area() {
-        return 0;
-    }
 
-    @Override
-    public Rectangle add(Rectangle r) {
-        return RectangleImpl.create(Math.min(x, r.x1()), Math.min(y, r.y1()), Math.max(x, r.x2()),
-                Math.max(y, r.y2()));
-    }
 
-    @Override
-    public boolean contains(double x, double y) {
-        return x == x && y == y;
-    }
 
-    @Override
-    public float intersectionArea(Rectangle r) {
-        return 0;
-    }
 
-    @Override
-    public float perimeter() {
-        return 0;
-    }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/github/davidmoten/rtree/geometry/RectangleImpl.java b/src/main/java/com/github/davidmoten/rtree/geometry/RectangleImpl.java
index 3f57a1d..7e1b4c4 100644
--- a/src/main/java/com/github/davidmoten/rtree/geometry/RectangleImpl.java
+++ b/src/main/java/com/github/davidmoten/rtree/geometry/RectangleImpl.java
@@ -17,11 +17,11 @@ final class RectangleImpl implements Rectangle {
         this.y2 = y2;
     }
 
-    static Rectangle create(double x1, double y1, double x2, double y2) {
+    static RectangleImpl create(double x1, double y1, double x2, double y2) {
         return new RectangleImpl((float) x1, (float) y1, (float) x2, (float) y2);
     }
 
-    static Rectangle create(float x1, float y1, float x2, float y2) {
+    static RectangleImpl create(float x1, float y1, float x2, float y2) {
         return new RectangleImpl(x1, y1, x2, y2);
     }
 
@@ -83,7 +83,7 @@ final class RectangleImpl implements Rectangle {
      * .rtree.geometry.Rectangle)
      */
     @Override
-    public Rectangle add(Rectangle r) {
+    public RectangleImpl add(Rectangle r) {
         return new RectangleImpl(min(x1, r.x1()), min(y1, r.y1()), max(x2, r.x2()),
                 max(y2, r.y2()));
     }
@@ -101,13 +101,13 @@ final class RectangleImpl implements Rectangle {
 
     @Override
     public boolean intersects(Rectangle r) {
-        return intersects(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());
+        return r.x2() >= x1 && r.x1() <= x2 && r.y2() >= y1 && r.y1() <= y2;
         // return r.x2() >= x1 && r.x1() <= x2 && r.y2() >= y1 && r.y1() <= y2;
     }
 
     @Override
     public double distance(Rectangle r) {
-        return distance(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());
+        if (intersects(r))
         // if (intersects(r))
         // return 0;
         // else {
@@ -126,36 +126,26 @@ final class RectangleImpl implements Rectangle {
         // return Math.sqrt(xDifference * xDifference + yDifference *
         // yDifference);
         // }
-    }
 
-    public static double distance(float x1, float y1, float x2, float y2, float a1, float b1,
-            float a2, float b2) {
-        if (intersects(x1, y1, x2, y2, a1, b1, a2, b2)) {
             return 0;
-        }
-        boolean xyMostLeft = x1 < a1;
-        float mostLeftX1 = xyMostLeft ? x1 : a1;
-        float mostRightX1 = xyMostLeft ? a1 : x1;
-        float mostLeftX2 = xyMostLeft ? x2 : a2;
-        double xDifference = max(0, mostLeftX1 == mostRightX1 ? 0 : mostRightX1 - mostLeftX2);
+        else {
+            Rectangle mostLeft = x1 < r.x1() ? this : r;
+            Rectangle mostRight = x1 > r.x1() ? this : r;
+            double xDifference = max(0,
+                    mostLeft.x1() == mostRight.x1() ? 0 : mostRight.x1() - mostLeft.x2());
 
-        boolean xyMostDown = y1 < b1;
-        float mostDownY1 = xyMostDown ? y1 : b1;
-        float mostUpY1 = xyMostDown ? b1 : y1;
-        float mostDownY2 = xyMostDown ? y2 : b2;
+            Rectangle upper = y1 < r.y1() ? this : r;
+            Rectangle lower = y1 > r.y1() ? this : r;
 
-        double yDifference = max(0, mostDownY1 == mostUpY1 ? 0 : mostUpY1 - mostDownY2);
+            double yDifference = max(0, upper.y1() == lower.y1() ? 0 : lower.y1() - upper.y2());
 
         return Math.sqrt(xDifference * xDifference + yDifference * yDifference);
     }
 
-    private static boolean intersects(float x1, float y1, float x2, float y2, float a1, float b1,
-            float a2, float b2) {
-        return x1 <= a2 && a1 <= x2 && y1 <= b2 && b1 <= y2;
     }
 
     @Override
-    public Rectangle mbr() {
+    public RectangleImpl mbr() {
         return this;
     }
 
@@ -224,4 +214,4 @@ final class RectangleImpl implements Rectangle {
             return b;
     }
 
-}
\ No newline at end of file
+}
