diff --git a/src/test/java/org/apache/hadoop/mrunit/TestMapReduceDriver.java b/src/test/java/org/apache/hadoop/mrunit/TestMapReduceDriver.java
index a25ab00..8fc9ae0 100644
--- a/src/test/java/org/apache/hadoop/mrunit/TestMapReduceDriver.java
+++ b/src/test/java/org/apache/hadoop/mrunit/TestMapReduceDriver.java
@@ -279,7 +279,7 @@ public class TestMapReduceDriver {
   /**
    * group comparator - group by first character
    */
-  public static class FirstCharComparator implements RawComparator<Text> {
+  public static class GroupComparator implements RawComparator<Text> {
 
     @Override
     public int compare(final Text o1, final Text o2) {
@@ -298,7 +298,7 @@ public class TestMapReduceDriver {
   /**
    * value order comparator - order by second character
    */
-  public static class SecondCharComparator implements RawComparator<Text> {
+  public static class OrderComparator implements RawComparator<Text> {
     @Override
     public int compare(final Text o1, final Text o2) {
       return o1.toString().substring(1, 2)
@@ -339,17 +339,17 @@ public class TestMapReduceDriver {
       }
     });
 
-    driver.withKeyGroupingComparator(new FirstCharComparator());
-    driver.withKeyOrderComparator(new SecondCharComparator());
+    driver.withKeyGroupingComparator(new GroupComparator());
+    driver.withKeyOrderComparator(new OrderComparator());
 
     driver.addInput(new Text("a1"), new LongWritable(1));
     driver.addInput(new Text("b1"), new LongWritable(1));
     driver.addInput(new Text("a3"), new LongWritable(3));
     driver.addInput(new Text("a2"), new LongWritable(2));
 
-    driver.addOutput(new Text("a1"), new LongWritable(0x1));
+    driver.addOutput(new Text("a1"), new LongWritable(0x1 | (0x2 << 8)
+        | (0x3 << 16)));
     driver.addOutput(new Text("b1"), new LongWritable(0x1));
-    driver.addOutput(new Text("a2"), new LongWritable(0x2 | (0x3 << 8)));
 
     driver.runTest();
   }
@@ -580,39 +580,4 @@ public class TestMapReduceDriver {
     assertNotNull(mapper.getMapInputPath());
     assertEquals(mapInputPath.getName(), mapper.getMapInputPath().getName());
   }
-
-  @Test
-  public void testGroupingComparatorBehaviour1() throws IOException {
-    driver.withInput(new Text("A1"),new LongWritable(1L))
-      .withInput(new Text("A2"),new LongWritable(1L))
-      .withInput(new Text("B1"),new LongWritable(1L))
-      .withInput(new Text("B2"),new LongWritable(1L))
-      .withInput(new Text("C1"),new LongWritable(1L))
-      .withOutput(new Text("A1"),new LongWritable(2L))
-      .withOutput(new Text("B1"),new LongWritable(2L))
-      .withOutput(new Text("C1"),new LongWritable(1L))
-      .withKeyGroupingComparator(new FirstCharComparator())
-      .runTest(false);
-  }
-
-  @Test
-  public void testGroupingComparatorBehaviour2() throws IOException {
-    // this test fails pre-MRUNIT-127 because of the incorrect 
-    // grouping of reduce keys in "shuffle". 
-    // MapReduce doesn't group keys which aren't in a contiguous
-    // range when sorted by their sorting comparator. 
-    driver.withInput(new Text("1A"),new LongWritable(1L))
-      .withInput(new Text("2A"),new LongWritable(1L))
-      .withInput(new Text("1B"),new LongWritable(1L))
-      .withInput(new Text("2B"),new LongWritable(1L))
-      .withInput(new Text("1C"),new LongWritable(1L))
-      .withOutput(new Text("1A"),new LongWritable(1L))
-      .withOutput(new Text("2A"),new LongWritable(1L))
-      .withOutput(new Text("1B"),new LongWritable(1L))
-      .withOutput(new Text("2B"),new LongWritable(1L))
-      .withOutput(new Text("1C"),new LongWritable(1L))
-      .withKeyGroupingComparator(new SecondCharComparator())
-      .runTest(false);
-  }
-
 }
diff --git a/src/test/java/org/apache/hadoop/mrunit/mapreduce/TestMapReduceDriver.java b/src/test/java/org/apache/hadoop/mrunit/mapreduce/TestMapReduceDriver.java
index 72488c7..f40441e 100644
--- a/src/test/java/org/apache/hadoop/mrunit/mapreduce/TestMapReduceDriver.java
+++ b/src/test/java/org/apache/hadoop/mrunit/mapreduce/TestMapReduceDriver.java
@@ -41,8 +41,8 @@ import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
 import org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer;
 import org.apache.hadoop.mapreduce.lib.reduce.LongSumReducer;
 import org.apache.hadoop.mrunit.ExpectedSuppliedException;
-import org.apache.hadoop.mrunit.TestMapReduceDriver.FirstCharComparator;
-import org.apache.hadoop.mrunit.TestMapReduceDriver.SecondCharComparator;
+import org.apache.hadoop.mrunit.TestMapReduceDriver.GroupComparator;
+import org.apache.hadoop.mrunit.TestMapReduceDriver.OrderComparator;
 import org.apache.hadoop.mrunit.mapreduce.TestMapDriver.ConfigurationMapper;
 import org.apache.hadoop.mrunit.mapreduce.TestReduceDriver.ConfigurationReducer;
 import org.apache.hadoop.mrunit.types.Pair;
@@ -282,17 +282,17 @@ public class TestMapReduceDriver {
       }
     });
 
-    driver.withKeyGroupingComparator(new FirstCharComparator());
-    driver.withKeyOrderComparator(new SecondCharComparator());
+    driver.withKeyGroupingComparator(new GroupComparator());
+    driver.withKeyOrderComparator(new OrderComparator());
 
     driver.addInput(new Text("a1"), new LongWritable(1));
     driver.addInput(new Text("b1"), new LongWritable(1));
     driver.addInput(new Text("a3"), new LongWritable(3));
     driver.addInput(new Text("a2"), new LongWritable(2));
 
-    driver.addOutput(new Text("a1"), new LongWritable(0x1));
+    driver.addOutput(new Text("a1"), new LongWritable(0x1 | (0x2 << 8)
+        | (0x3 << 16)));
     driver.addOutput(new Text("b1"), new LongWritable(0x1));
-    driver.addOutput(new Text("a2"), new LongWritable(0x2 | (0x3 << 8)));
 
     driver.runTest();
   }
@@ -520,39 +520,4 @@ public class TestMapReduceDriver {
     assertNotNull(mapper.getMapInputPath());
     assertEquals(mapInputPath.getName(), mapper.getMapInputPath().getName());
   }
-
-  @Test
-  public void testGroupingComparatorBehaviour1() throws IOException {
-    driver.withInput(new Text("A1"),new LongWritable(1L))
-      .withInput(new Text("A2"),new LongWritable(1L))
-      .withInput(new Text("B1"),new LongWritable(1L))
-      .withInput(new Text("B2"),new LongWritable(1L))
-      .withInput(new Text("C1"),new LongWritable(1L))
-      .withOutput(new Text("A1"),new LongWritable(2L))
-      .withOutput(new Text("B1"),new LongWritable(2L))
-      .withOutput(new Text("C1"),new LongWritable(1L))
-      .withKeyGroupingComparator(new FirstCharComparator())
-      .runTest(false);
-  }
-
-  @Test
-  public void testGroupingComparatorBehaviour2() throws IOException {
-    // this test fails pre-MRUNIT-127 because of the incorrect 
-    // grouping of reduce keys in "shuffle". 
-    // MapReduce doesn't group keys which aren't in a contiguous
-    // range when sorted by their sorting comparator. 
-    driver.withInput(new Text("1A"),new LongWritable(1L))
-      .withInput(new Text("2A"),new LongWritable(1L))
-      .withInput(new Text("1B"),new LongWritable(1L))
-      .withInput(new Text("2B"),new LongWritable(1L))
-      .withInput(new Text("1C"),new LongWritable(1L))
-      .withOutput(new Text("1A"),new LongWritable(1L))
-      .withOutput(new Text("2A"),new LongWritable(1L))
-      .withOutput(new Text("1B"),new LongWritable(1L))
-      .withOutput(new Text("2B"),new LongWritable(1L))
-      .withOutput(new Text("1C"),new LongWritable(1L))
-      .withKeyGroupingComparator(new SecondCharComparator())
-      .runTest(false);
-  }
-
 }
