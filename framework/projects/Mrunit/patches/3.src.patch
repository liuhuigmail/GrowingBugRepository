diff --git a/src/main/java/org/apache/hadoop/mrunit/MapDriver.java b/src/main/java/org/apache/hadoop/mrunit/MapDriver.java
index 7c9646b..1b2bd69 100644
--- a/src/main/java/org/apache/hadoop/mrunit/MapDriver.java
+++ b/src/main/java/org/apache/hadoop/mrunit/MapDriver.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.conf.Configurable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.Counters;
 import org.apache.hadoop.mapred.Mapper;
@@ -187,13 +186,9 @@ public class MapDriver<K1, V1, K2, V2> extends MapDriverBase<K1, V1, K2, V2> {
   @Override
   public List<Pair<K2, V2>> run() throws IOException {
     MockOutputCollector<K2, V2> outputCollector =
-        new MockOutputCollector<K2, V2>(getConfiguration());
+      new MockOutputCollector<K2, V2>();
     MockReporter reporter = new MockReporter(MockReporter.ReporterType.Mapper, getCounters());
 
-    if (myMapper instanceof Configurable) {
-      ((Configurable)myMapper).setConf(getConfiguration());
-    }
-
     myMapper.map(inputKey, inputVal, outputCollector, reporter);
 
     return outputCollector.getOutputs();
diff --git a/src/main/java/org/apache/hadoop/mrunit/ReduceDriver.java b/src/main/java/org/apache/hadoop/mrunit/ReduceDriver.java
index 301fbb5..e017725 100644
--- a/src/main/java/org/apache/hadoop/mrunit/ReduceDriver.java
+++ b/src/main/java/org/apache/hadoop/mrunit/ReduceDriver.java
@@ -194,7 +194,7 @@ public class ReduceDriver<K1, V1, K2, V2> extends ReduceDriverBase<K1, V1, K2, V
   @Override
   public List<Pair<K2, V2>> run() throws IOException {
     MockOutputCollector<K2, V2> outputCollector =
-        new MockOutputCollector<K2, V2>(getConfiguration());
+      new MockOutputCollector<K2, V2>();
     MockReporter reporter = new MockReporter(MockReporter.ReporterType.Reducer, getCounters());
 
     myReducer.reduce(inputKey, inputValues.iterator(), outputCollector,
diff --git a/src/main/java/org/apache/hadoop/mrunit/mapreduce/MapDriver.java b/src/main/java/org/apache/hadoop/mrunit/mapreduce/MapDriver.java
index b437907..0046328 100644
--- a/src/main/java/org/apache/hadoop/mrunit/mapreduce/MapDriver.java
+++ b/src/main/java/org/apache/hadoop/mrunit/mapreduce/MapDriver.java
@@ -195,7 +195,7 @@ public class MapDriver<K1, V1, K2, V2> extends MapDriverBase<K1, V1, K2, V2> {
     try {
       MockMapContextWrapper<K1, V1, K2, V2> wrapper = new MockMapContextWrapper();
       MockMapContextWrapper<K1, V1, K2, V2>.MockMapContext context =
-          wrapper.getMockContext(inputs, getCounters(), getConfiguration());
+          wrapper.getMockContext(inputs, getCounters());
 
       myMapper.run(context);
       return context.getOutputs();
diff --git a/src/main/java/org/apache/hadoop/mrunit/mapreduce/ReduceDriver.java b/src/main/java/org/apache/hadoop/mrunit/mapreduce/ReduceDriver.java
index e863e1a..927e1ee 100644
--- a/src/main/java/org/apache/hadoop/mrunit/mapreduce/ReduceDriver.java
+++ b/src/main/java/org/apache/hadoop/mrunit/mapreduce/ReduceDriver.java
@@ -200,7 +200,7 @@ public class ReduceDriver<K1, V1, K2, V2> extends ReduceDriverBase<K1, V1, K2, V
     try {
       MockReduceContextWrapper<K1, V1, K2, V2> wrapper = new MockReduceContextWrapper();
       MockReduceContextWrapper<K1, V1, K2, V2>.MockReduceContext context =
-          wrapper.getMockContext(inputs, getCounters(), getConfiguration());
+          wrapper.getMockContext(inputs, getCounters());
 
       myReducer.run(context);
       return context.getOutputs();
diff --git a/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockMapContextWrapper.java b/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockMapContextWrapper.java
index a77eec2..e9cf450 100644
--- a/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockMapContextWrapper.java
+++ b/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockMapContextWrapper.java
@@ -56,14 +56,14 @@ public class MockMapContextWrapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
     private Pair<KEYIN, VALUEIN> curInput;
     private MockOutputCollector<KEYOUT, VALUEOUT> output;
 
-    public MockMapContext(final List<Pair<KEYIN, VALUEIN>> in, final Counters counters, Configuration conf)
+    public MockMapContext(final List<Pair<KEYIN, VALUEIN>> in, final Counters counters)
         throws IOException, InterruptedException {
 
-      super(conf,
+      super(new Configuration(),
             new TaskAttemptID("mrunit-jt", 0, true, 0, 0),
             null, null, new MockOutputCommitter(), new MockReporter(counters), null);
       this.inputIter = in.iterator();
-      this.output = new MockOutputCollector<KEYOUT, VALUEOUT>(getConfiguration());
+      this.output = new MockOutputCollector<KEYOUT, VALUEOUT>();
     }
 
     @Override
@@ -114,8 +114,8 @@ public class MockMapContextWrapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
     }
   }
 
-  public MockMapContext getMockContext(List<Pair<KEYIN, VALUEIN>> inputs, Counters counters, Configuration conf)
+  public MockMapContext getMockContext(List<Pair<KEYIN, VALUEIN>> inputs, Counters counters)
       throws IOException, InterruptedException {
-    return new MockMapContext(inputs, counters, conf);
+    return new MockMapContext(inputs, counters);
   }
 }
diff --git a/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReduceContextWrapper.java b/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReduceContextWrapper.java
index 45091b4..c771f7c 100644
--- a/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReduceContextWrapper.java
+++ b/src/main/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReduceContextWrapper.java
@@ -62,16 +62,16 @@ public class MockReduceContextWrapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
 
     private MockOutputCollector<KEYOUT, VALUEOUT> output;
 
-    public MockReduceContext(final List<Pair<KEYIN, List<VALUEIN>>> in, final Counters counters, Configuration conf)
+    public MockReduceContext(final List<Pair<KEYIN, List<VALUEIN>>> in, final Counters counters)
         throws IOException, InterruptedException {
 
-      super(conf,
+      super(new Configuration(),
             new TaskAttemptID("mrunit-jt", 0, false, 0, 0),
             new MockRawKeyValueIterator(), null, null, null,
             new MockOutputCommitter(), new MockReporter(counters), null,
             (Class) Text.class, (Class) Text.class);
       this.inputIter = in.iterator();
-      this.output = new MockOutputCollector<KEYOUT, VALUEOUT>(getConfiguration());
+      this.output = new MockOutputCollector<KEYOUT, VALUEOUT>();
     }
 
 
@@ -178,8 +178,8 @@ public class MockReduceContextWrapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
   }
 
   public MockReduceContext getMockContext(List<Pair<KEYIN, List<VALUEIN>>> inputs,
-      Counters counters, Configuration conf)
+      Counters counters)
       throws IOException, InterruptedException {
-    return new MockReduceContext(inputs, counters, conf);
+    return new MockReduceContext(inputs, counters);
   }
 }
diff --git a/src/main/java/org/apache/hadoop/mrunit/mock/MockOutputCollector.java b/src/main/java/org/apache/hadoop/mrunit/mock/MockOutputCollector.java
index d156b07..34368fb 100644
--- a/src/main/java/org/apache/hadoop/mrunit/mock/MockOutputCollector.java
+++ b/src/main/java/org/apache/hadoop/mrunit/mock/MockOutputCollector.java
@@ -30,6 +30,7 @@ import org.apache.hadoop.io.serializer.SerializationFactory;
 import org.apache.hadoop.io.serializer.Serializer;
 import org.apache.hadoop.mapred.OutputCollector;
 import org.apache.hadoop.mrunit.types.Pair;
+import org.apache.hadoop.util.ReflectionUtils;
 
 
 /**
@@ -46,17 +47,22 @@ public class MockOutputCollector<K, V> implements OutputCollector<K, V> {
   private Configuration conf;
 
 
-  public MockOutputCollector(Configuration config) {
+  public MockOutputCollector() {
     collectedOutputs = new ArrayList<Pair<K, V>>();
 
     outBuffer = new DataOutputBuffer();
     inBuffer = new DataInputBuffer();
 
-    conf = config;
+    conf = new Configuration();
     serializationFactory = new SerializationFactory(conf);
   }
 
 
+  private Object getInstance(Class klazz) {
+    return ReflectionUtils.newInstance(klazz, conf);
+  }
+
+
   private Object deepCopy(Object obj) throws IOException {
 
     if (null == obj) {
@@ -64,7 +70,7 @@ public class MockOutputCollector<K, V> implements OutputCollector<K, V> {
     }
 
     Class klazz = obj.getClass();
-    Object out = null;
+    Object out = getInstance(klazz); // the output object to return.
     Serializer s = serializationFactory.getSerializer(klazz);
     Deserializer ds = serializationFactory.getDeserializer(klazz);
 
